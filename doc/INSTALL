This file contains the installation instructions for Joukahainen.

As Joukahainen is still being developed, there are not fixed
installation packages. You should check out the code directly
from SVN trunk (which should be rather stable), write your
language pack, test the application (and report any bugs you
may find) and when you are happy, put it to production use.
Quite likely all installations of Joukahainen will be different
anyway, so having single unified packages does not make any sense
at the moment.



Requirements
============

These installation instructions assume that you are using Linux.
There should be nothing to prevent using other operating systems
as well, and I will happily fix bugs and improve these instructions
if that is needed to support them.

You will need to have all of the following programs installed and
configured:
- Apache http server
- PostgreSQL database server and client
- Python
- mod_python (Python <-> Apache)
- python-pygresql (Python <-> PostgreSQL)
- gettext
- Subversion (SVN)
- GNU make (other variants may work as well) 

For all of these programs, any version released in year 2005 or later
should do. Here on Debian unstable I have the following versions:
apache2                  2.0.55-4.1
postgresql-7.4           7.4.13-5
postgresql-client-7.4    7.4.13-5
python                   2.4.3-11
libapache2-mod-python    3.2.10-1
python-pygresql          3.8.1-1
gettext                  0.15-1
subversion               1.3.2-5+b1
make                     3.81-2



Installing Joukahainen
======================

In the following instructions INSTALLATION_DIRECTORY is the directory
where Joukahainen will be installed (for example "/usr/local/joukahainen")
and WWW_LOCAL_ROOT is the directory on the local filesystem that contains
the files visible through the http server (for example "/var/www/joukahainen").

1) Check out the application from SVN:
svn co https://svn.sourceforge.net/svnroot/hunspell-fi/trunk/joukahainen INSTALLATION_DIRECTORY/joukahainen

2) Create WWW_LOCAL_ROOT and add symbolic links from INSTALLATION_DIRECTORY/joukahainen/wwwroot
   to WWW_LOCAL_ROOT for the following files:
   - _apply_config.py
   - index.py
   - jscripts.js
   - query.py
   - style.css
   - task.py
   - user.py
   - word.py

3) Copy INSTALLATION_DIRECTORY/joukahainen/wwwroot/_config.py to WWW_LOCAL_ROOT and modify it as needed.
   Probably you have to do the following:
   - change INSTALLATION_DIRECTORY to match what you have used here
   - set WWW_ROOT_DIR to what you want to have as a directory for Joukahainen in the http URL:s
   - set WIKI_URL to match the Wikiktionary of your vocabulary language (if you want Wiki links to work)
   - set PW_SALT to a random string
   - set LANG to match the language code of your vocabulary
   - set DB_PASSWORD to a random string (you may want to change other database parameters as well, but
     the defaults should be good enough in typical setup)

4) Configure your web server. The following configuration snippet should be enough:

  <Directory WWW_LOCAL_ROOT> # Change this
    AddHandler python-program .py
    PythonHandler mod_python.publisher
    PythonDebug On        # Set this to Off before making the installation public to improve security
    AddType text/html;charset=UTF-8 .html
    DirectoryIndex index/index
  </Directory>

5) Create language pack for your language. This is described later and is the most demanding
   part of the installation unless there already is a language pack under
   INSTALLATION_DIRECTORY/joukahainen/langpacks for your language.

6) Use the psql tool to create the database user for which you had set the user name and password in
   _config.py

7) Use the psql tool (as postgres, not as the newly created user) to set up the database schema and
   populate it with static data:
   
   \i INSTALLATION_DIRECTORY/joukahainen/sql/schema.sql
   \i INSTALLATION_DIRECTORY/joukahainen/sql/schema_private.sql
   \i INSTALLATION_DIRECTORY/joukahainen/langpacks/LANG/static.sql

  Create the password hash for the initial user by starting python and entering commands

  >>> import sha
  >>> sha.new((u'_config.PW_SALT' + u'INITIAL_PASSWORD').encode('UTF-8')).hexdigest()

  (Replace _config.PW_SALT and INITIAL_PASSWORD with proper strings.) You will get the password
  hash, which you can store to the database by using command

  joukahainen_private=# update appuser set pwhash='59b3e8d637cf97edbe2384cf59cb7453dfe30789' where uid=2;

  (Replace the hash with the correct value.)

8) Create the gettext .mo files by entering INSTALLATION_DIRECTORY/joukahainen and running make.

9) Perform any language specific installation tasks that may be specified in the INSTALL file of
   your language pack.

10) (Re)start Apache, and you should have a working installation.

You may want to populate your new database with existing information from other sources. Currently
we only have an importer for the Finnish Suomi-malaga format, but writing a generic Hunspell importer
that maps affix flags to respective flag attributes having [Hunspell-X] in their description should
be easy.
You can also import raw unchecked word lists, like the ones available from http://borel.slu.edu/crubadan/
to a special table created for that purpose. The table has name raw_word and contains the following
columns:
  word: the candidate word
  info: some classification information for the word
  notes: free form notes
  processed: boolean field to mark already checked words, defaults to false.
The crúbdán data can be imported to this table by using the psql client \copy command and is available
to the users of Joukahainen through "Add words from a list of suggested words" link from the main page
of the application.


Creating a language pack
========================

The language pack should be created by placing the following files under
langpacks/LANG:

1) messages.po: This file should contain the user interface translation for language
   LANG. Corresponding template is located at transl/joukahainen.pot after running make
   as described in the installation instructions, step 8. This file is not needed for English.

2) static.sql: This file contains the SQL commands that are needed to initialise the database
   for your language. Using langpacks/en_US/static.sql as a reference you can see what is needed
   there:
   - Commands to clear the content of the database tables
   - Commands that define the word classes for your language
   - Commands that define meta data fields for your language. These will include flag attributes
     for each Hunspell affix flag if you want to use Joukahainen to directly set the affix flags.
   - Commands to insert initial application users.
   - Commands to create review tasks. These are not really necessary, you can safely leave them away.
     en_US/static.sql contains a review task for words starting with letter 'a' just as an example.
   - Commands to initialise the private part of the database. You will need to include a copy of your
     user insertion commands here, but this time with password hashes. Note that you only need to add
     one user with admin rights: the rest can be added later through the web interface.

3) functions.py: Language specific program code. Here you will need to supply some Python functions.
   In practice it is enough to use en_US/function.py as a template, just change WCHARS to contain all
   valid word characters for your language. Here you will also be able to add your own output filters
   for exporting word lists and generating inflections. There is currently no English example,
   see fi/functions.py if you are interested in implementing these. We will at least need to implement
   output filter for Hunspell dictionary format which is not yet done.

4) index_index.txt: HTML template for the index page. The first line contains the page title element,
   the rest will be put inside the <body>...</body> tags. The body may contain any HTML code and
   additionally certain special "widgets" that are surrounded by $$ signs in the template. See the
   example from en_US on how to use these, more complete documentation can be written if there is need
   for it.

5) word_edit.txt: HTML template for word editor. See 4)
